To access data I will use Quandl as it offers a free API
Retrieving the data requires the following function to download and cache the datasets from Quandl.

          def get_quandl_data(quandl_id):
              '''Download and cache Quandl dataseries'''
              cache_path = '{}.pkl'.format(quandl_id).replace('/','-')
              try:
                  f = open(cache_path, 'rb')
                  df = pickle.load(f)   
                  print('Loaded {} from cache'.format(quandl_id))
              except (OSError, IOError) as e:
                  print('Downloading {} from Quandl'.format(quandl_id))
                  df = quandl.get(quandl_id, returns="pandas")
                  df.to_pickle(cache_path)
                  print('Cached {} at {}'.format(quandl_id, cache_path))
              return df

The previously downloaded package Pickle, helps to download the data as a file in order to not download it every time the code is run
The above function returns df, a Pandas dataframe
The Quandl function enables to specify the exchange and the currency used to take the Bitcoin price data from Kraken

          btc_usd_price_kraken = get_quandl_data('BCHARTS/KRAKENUSD')
          
To look at the first five rows from the data run

          btc_usd_price_kraken.head()
          
To Visualize the downloaded data run
          
          btc_trace = go.Scatter(x=btc_usd_price_kraken.index, y=btc_usd_price_kraken['Weighted Price'])
          py.iplot([btc_trace])
          
Visualizations can be generated using plotly or matplotlib. PLotly is good as it uses D3.js (data driven documents)
which can easily be embedded into a webpage

As prices often differ from one exchange to the other, it might be good to determine BTC price getting an aggregate of all major BTC market prices.
In this case I will pull pricing data from 3 more BTC exchanges, asides Kraken
         
         exchanges = ['COINBASE','BITSTAMP','ITBIT']

          exchange_data = {}

          exchange_data['KRAKEN'] = btc_usd_price_kraken

          for exchange in exchanges:
              exchange_code = 'BCHARTS/{}USD'.format(exchange)
              btc_exchange_df = get_quandl_data(exchange_code)
              exchange_data[exchange] = btc_exchange_df

The following function enables to merge each market's desired column into the aggregate dataframe

          def merge_dfs_on_column(dataframes, labels, col):
              '''Merge a single column of each dataframe into a new combined dataframe'''
              series_dict = {}
              for index in range(len(dataframes)):
                  series_dict[labels[index]] = dataframes[index][col]

              return pd.DataFrame(series_dict)

Once the dataframe has been created, the following line merges the price columns into the "weighted price column"

          btc_usd_datasets = merge_dfs_on_column(list(exchange_data.values()), list(exchange_data.keys()), 'Weighted Price')

Using the tail method you can visualize the first 5 rows 

          btc_usd_datasets.tail()

 
